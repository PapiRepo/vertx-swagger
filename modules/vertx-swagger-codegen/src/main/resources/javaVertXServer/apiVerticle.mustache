package {{package}};

import com.fasterxml.jackson.core.type.TypeReference;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Handler;
import io.vertx.core.eventbus.Message;
{{#hasAuthMethods}}
import io.vertx.ext.auth.User;
import com.github.phiz71.vertx.swagger.router.SwaggerRouter;
{{/hasAuthMethods}}

{{#imports}}import {{import}};
{{/imports}}

import {{invokerPackage}}.util.VerticleHelper;

public class {{classname}}Verticle extends AbstractVerticle {
    private VerticleHelper verticleHelper = new VerticleHelper(this.getClass());

    {{#operations}}{{#operation}}{{#vendorExtensions}}public static final String {{x-serviceId-varName}} = "{{x-serviceId}}";
    {{/vendorExtensions}}{{/operation}}{{/operations}}

    private {{classname}} service;

    {{#operations}}{{#operation}}//Handler for {{#vendorExtensions}}{{x-serviceId}}{{/vendorExtensions}}
    final Handler<Message<io.vertx.core.json.JsonObject>> {{#vendorExtensions}}{{x-serviceId}}{{/vendorExtensions}}Handler = message -> {
        try {
    {{#hasAuthMethods}}
            User user = SwaggerRouter.extractAuthUserFromMessage(message);
    {{/hasAuthMethods}}
    {{#hasParams}}
        {{#allParams}}
            {{#isListContainer}}
            {{{dataType}}} {{paramName}} = io.vertx.core.json.Json.mapper.readValue(
            									java.util.Optional.ofNullable(
            										message.body().getJsonArray("{{baseName}}")).map(io.vertx.core.json.JsonArray::encode).orElse("null"),
            									new TypeReference<{{{dataType}}}>() {});
            {{/isListContainer}}
            {{^isListContainer}}
                {{#isPrimitiveType}}
                	{{#isEnum}}
                		{{#required}}
            {{{datatypeWithEnum}}} {{paramName}} = VerticleHelper.convertEnum({{{datatypeWithEnum}}}.class, message.body().getString("{{baseName}}"));
                        {{/required}}
                        {{^required}}
            {{{datatypeWithEnum}}} {{paramName}} = null;
            if (message.body().getString("{{baseName}}") != null) {
                {{paramName}} = VerticleHelper.convertEnum({{{datatypeWithEnum}}}.class, message.body().getString("{{baseName}}"));
            }           
                        {{/required}}
                	{{/isEnum}}
                	{{^isEnum}}
	                    {{#isString}}
	                        {{#vendorExtensions}}
	                            {{#X-isUUID}}
	                                {{#required}}
            {{{dataType}}} {{paramName}} = {{{dataType}}}.fromString(message.body().getString("{{baseName}}"));
	                                {{/required}}
	                                {{^required}}
            {{{dataType}}} {{paramName}} = null;
            if (message.body().getString("{{baseName}}") != null) {
                {{paramName}} = {{{dataType}}}.fromString(message.body().getString("{{baseName}}"));
            }
	                                {{/required}}
	                            {{/X-isUUID}}
	                            {{^X-isUUID}}
            {{{dataType}}} {{paramName}} = message.body().getString("{{baseName}}");
	                            {{/X-isUUID}}
	                        {{/vendorExtensions}}
	                        {{^vendorExtensions}}
            {{{dataType}}} {{paramName}} = message.body().getString("{{baseName}}");
	                        {{/vendorExtensions}}
	                    {{/isString}}
	                {{/isEnum}}
                    {{^isString}}
                        {{#required}}
            {{{dataType}}} {{paramName}} = io.vertx.core.json.Json.mapper.readValue(
            						message.body().getString("{{baseName}}"), {{{dataType}}}.class);
                        {{/required}}
                        {{^required}}
            {{{dataType}}} {{paramName}} = null;
            if (message.body().getString("{{baseName}}") != null) {
                {{paramName}} = io.vertx.core.json.Json.mapper.readValue(
                					message.body().getString("{{baseName}}"), {{{dataType}}}.class);
            }
                        {{/required}}
                    {{/isString}}
                {{/isPrimitiveType}}
                {{^isPrimitiveType}}
            		{{#isFile}}
            {{{dataType}}} {{paramName}} = new {{{dataType}}}(message.body().getJsonObject("{{baseName}}").getString("uploadedFileName"),
            										message.body().getJsonObject("{{baseName}}").getString("formFileName"));
                    {{/isFile}}
                    {{^isFile}}
            {{{dataType}}} {{paramName}} = io.vertx.core.json.Json.mapper.readValue(
            						message.body().getJsonObject("{{baseName}}").encode(), {{{dataType}}}.class);
                    {{/isFile}}
                {{/isPrimitiveType}}
            {{/isListContainer}}
        {{/allParams}}
    {{/hasParams}}
    {{#rxInterface}}
{{>RxCall}}
    {{/rxInterface}}
    {{^rxInterface}}
{{>AsyncCall}}
    {{/rxInterface}}
    {{#vendorExtensions}}
    	{{#X-validateEnum}}
    	} catch (com.github.phiz71.vertx.swagger.router.EnumParseException e) {
    		verticleHelper.manageError(message, new com.github.phiz71.vertx.swagger.router.ApiException(400, "Invalid enum value", e), {{#vendorExtensions}}{{x-serviceId-varName}}{{/vendorExtensions}});
    	{{/X-validateEnum}}
    	{{#X-parseJSON}}
    	} catch (com.fasterxml.jackson.core.JsonProcessingException e) {
    		verticleHelper.manageError(message, new {{classname}}Exception.{{operationIdCamelCase}}400Exception(e), {{#vendorExtensions}}{{x-serviceId-varName}}{{/vendorExtensions}});
    	{{/X-parseJSON}}
    {{/vendorExtensions}}
        } catch (Exception e) {
            verticleHelper.manageError(message, e, {{#vendorExtensions}}{{x-serviceId-varName}}{{/vendorExtensions}});
        }
    };

    {{/operation}}{{/operations}}

    @Override
    public void start() throws Exception {
        service = createServiceImplementation();
        {{#operations}}{{#operation}}vertx.eventBus().<io.vertx.core.json.JsonObject> consumer({{#vendorExtensions}}{{x-serviceId-varName}}{{/vendorExtensions}}).handler({{#vendorExtensions}}{{x-serviceId}}{{/vendorExtensions}}Handler);
        {{/operation}}{{/operations}}
    }

    protected {{classname}} createServiceImplementation() {
        return new {{classname}}Impl(vertx, config());
    }
}
