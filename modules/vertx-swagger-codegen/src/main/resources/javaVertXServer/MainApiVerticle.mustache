package {{invokerPackage}};

import java.nio.charset.Charset;

import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.github.phiz71.vertx.swagger.router.SwaggerRouter;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Future;
import io.vertx.core.file.FileSystem;
import io.vertx.core.json.Json;
import io.vertx.core.logging.Logger;
import io.vertx.core.logging.LoggerFactory;
import io.vertx.ext.web.Router;

public class MainApiVerticle extends AbstractVerticle {
    private static final Logger LOGGER = LoggerFactory.getLogger(MainApiVerticle.class);
    
    private static final Class<?>[] verticlesToDeploy = {
    {{#apiInfo}}{{#apis}}	{{apiPackage}}.{{classname}}Verticle.class{{^-last}},
    {{/-last}}{{/apis}}{{/apiInfo}}
    };
    
    @Override
    public void start(Future<Void> startFuture) throws Exception {
    	LOGGER.info("Starting MainApiVerticle");
        Json.mapper.registerModule(new JavaTimeModule());
    	FileSystem vertxFileSystem = vertx.fileSystem();
        vertxFileSystem.readFile("swagger.json", readFile -> {
            if (readFile.succeeded()) {
                Router swaggerRouter = SwaggerRouter.createRouter(vertx, readFile.result().toString(Charset.forName("utf-8")));
            
                deployVerticles(startFuture);

                vertx.createHttpServer() 
                    .requestHandler(swaggerRouter::accept) 
                    .listen(config().getInteger("http.port", {{serverPort}}));
                startFuture.complete();
            } else {
            	startFuture.fail(readFile.cause());
            }
        });        		        
    }
    
	@Override
    public void stop() {
    	LOGGER.info("Stopping MainApiVerticle");
    }
    
    public void deployVerticles(Future<Void> startFuture) {
		for (Class<?> clazz : verticlesToDeploy) {
        	vertx.deployVerticle(clazz.getName(), res -> {
	            if (res.succeeded()) {
	                LOGGER.info(String.format("%s (%s) deployed", clazz.getSimpleName(), res.result()));
	            } else {
	                startFuture.fail(res.cause());
	                LOGGER.error(clazz.getSimpleName() + " deployment failed");
	            }
	        });
     	}
    }
    
}